name: Test Azure Terraform Modules

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: "1.9.0"
  PYTHON_VERSION: "3.11"
  FAIL_ON_SECURITY: "true"

jobs:
  validation-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Checkov (pinned)
        run: pip install 'checkov==3.2.328'

      - name: Format check
        run: terraform fmt -check -recursive .

      - name: Validate Terraform configurations
        run: |
          find . -type f -name "*.tf" \
            -not -path "*/.terraform/*" \
            -not -path "*/test-results/*" \
            -exec dirname {} \; | sort -u | while read dir; do
            echo "::group::Validating $dir"
            (cd "$dir" && terraform init -backend=false && terraform validate) || exit 1
            echo "::endgroup::"
          done

      - name: Quick security scan
        run: |
          checkov -d . --framework terraform --quiet --output cli --soft-fail || true

  security-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validation-tests
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run security tests
        id: run_sec
        env:
          FAIL_ON_SECURITY: ${{ env.FAIL_ON_SECURITY }}
        run: |
          chmod +x test/security/run_security_tests.sh
          if [ "${FAIL_ON_SECURITY}" = "false" ]; then
            ./test/security/run_security_tests.sh all || echo "::warning::Security checks found issues; continuing"
          else
            ./test/security/run_security_tests.sh all
          fi

      - name: Security summary
        if: always()
        run: |
          echo "## Security results" >> $GITHUB_STEP_SUMMARY
          f="$(ls -1 test-results/security/checkov-*.json 2>/dev/null | head -n1 || true)"
          if [ -n "$f" ]; then
            jq -r '"Checkov: failed=\(.summary.failed // 0), passed=\(.summary.passed // 0)"' "$f" >> $GITHUB_STEP_SUMMARY || true
          else
            echo "No Checkov JSON found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail job if security tests failed
        if: steps.run_sec.outcome == 'failure'
        run: exit 1

  # Terratest - TODO: Set github secrets and uncomment
  # terratest:
  #   name: Terratest - ${{ matrix.module }}
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: validation-tests
  #   if: github.event_name == 'push' || github.event.pull_request.draft == false
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       module:
  #         - azure-resource-group
  #         - azure-networking
  #         - azure-storage
  #         - azure-keyvault
  #         - azure-vm
  #         - azure-monitoring
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache-dependency-path: test/terratest/go.sum

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: ${{ env.TF_VERSION }}
  #         terraform_wrapper: false

  #     - name: Azure Login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Set Azure environment variables
  #       run: |
  #         echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
  #         echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
  #         echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
  #         echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
  #         echo "TEST_RESOURCE_GROUP_NAME=test-rg-gha-${{ github.run_id }}" >> $GITHUB_ENV
  #         echo "TEST_LOCATION=eastus" >> $GITHUB_ENV

  #     - name: Install Go dependencies
  #       working-directory: test/terratest
  #       run: |
  #         go mod download
  #         go mod verify

  #     - name: Run Terratest for ${{ matrix.module }}
  #       working-directory: test/terratest
  #       run: |
  #         MODULE_NAME=$(echo "${{ matrix.module }}" | tr '[:lower:]-' '[:upper:]_')
  #         go test -v -timeout 45m -run "Test${MODULE_NAME}" ./... | tee test-output.log

  #     - name: Cleanup Azure resources
  #       if: always()
  #       run: |
  #         az group delete \
  #           --name "test-rg-gha-${{ github.run_id }}" \
  #           --yes \
  #           --no-wait || true

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: test-results-${{ matrix.module }}
  #         path: |
  #           test/terratest/test-output.log
  #           test/terratest/test-results/
  #         retention-days: 14


  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validation-tests, security-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.validation-tests.result }}" != "success" ]]; then
            echo "::error::Validation tests failed"; exit 1; fi
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "::warning::Security tests failed"; fi
          echo "::notice::All required tests passed"
