name: Test Azure Terraform Modules

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  TF_VERSION: "1.9.0"
  GO_VERSION: "1.22"
  PYTHON_VERSION: "3.11"

jobs:
  # Quick validation checks
  validation-tests:
    name: Validation Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Checkov
        run: pip install checkov

      - name: Format check
        run: terraform fmt -check -recursive .

      - name: Validate Terraform configurations
        run: |
          find . -type f -name "*.tf" \
            -not -path "*/.terraform/*" \
            -not -path "*/test-results/*" \
            -exec dirname {} \; | sort -u | while read dir; do
            echo "::group::Validating $dir"
            (cd "$dir" && terraform init -backend=false && terraform validate) || exit 1
            echo "::endgroup::"
          done

      - name: Quick security scan
        run: |
          checkov -d . \
            --framework terraform \
            --quiet \
            --output cli \
            --soft-fail || true

  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validation-tests
    permissions:
      security-events: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Run security tests
        run: |
          chmod +x test/security/run_security_tests.sh
          ./test/security/run_security_tests.sh all

      - name: Upload security results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-results
          path: test-results/security/
          retention-days: 30

      - name: Upload Trivy SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: test-results/security/trivy-project-root.sarif
          category: trivy

      - name: Upload Checkov SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: test-results/security/checkov-project-root.sarif
          category: checkov

  # Terratest - TODO: Set github secrets and uncomment
  # terratest:
  #   name: Terratest - ${{ matrix.module }}
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 60
  #   needs: validation-tests
  #   if: github.event_name == 'push' || github.event.pull_request.draft == false
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       module:
  #         - azure-resource-group
  #         - azure-networking
  #         - azure-storage
  #         - azure-keyvault
  #         - azure-vm
  #         - azure-monitoring
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Setup Go
  #       uses: actions/setup-go@v5
  #       with:
  #         go-version: ${{ env.GO_VERSION }}
  #         cache-dependency-path: test/terratest/go.sum

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v3
  #       with:
  #         terraform_version: ${{ env.TF_VERSION }}
  #         terraform_wrapper: false

  #     - name: Azure Login
  #       uses: azure/login@v2
  #       with:
  #         creds: ${{ secrets.AZURE_CREDENTIALS }}

  #     - name: Set Azure environment variables
  #       run: |
  #         echo "ARM_CLIENT_ID=${{ secrets.ARM_CLIENT_ID }}" >> $GITHUB_ENV
  #         echo "ARM_CLIENT_SECRET=${{ secrets.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
  #         echo "ARM_SUBSCRIPTION_ID=${{ secrets.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
  #         echo "ARM_TENANT_ID=${{ secrets.ARM_TENANT_ID }}" >> $GITHUB_ENV
  #         echo "TEST_RESOURCE_GROUP_NAME=test-rg-gha-${{ github.run_id }}" >> $GITHUB_ENV
  #         echo "TEST_LOCATION=eastus" >> $GITHUB_ENV

  #     - name: Install Go dependencies
  #       working-directory: test/terratest
  #       run: |
  #         go mod download
  #         go mod verify

  #     - name: Run Terratest for ${{ matrix.module }}
  #       working-directory: test/terratest
  #       run: |
  #         MODULE_NAME=$(echo "${{ matrix.module }}" | tr '[:lower:]-' '[:upper:]_')
  #         go test -v -timeout 45m -run "Test${MODULE_NAME}" ./... | tee test-output.log

  #     - name: Cleanup Azure resources
  #       if: always()
  #       run: |
  #         az group delete \
  #           --name "test-rg-gha-${{ github.run_id }}" \
  #           --yes \
  #           --no-wait || true

  #     - name: Upload test results
  #       uses: actions/upload-artifact@v4
  #       if: always()
  #       with:
  #         name: test-results-${{ matrix.module }}
  #         path: |
  #           test/terratest/test-output.log
  #           test/terratest/test-results/
  #         retention-days: 14

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [validation-tests, security-tests]
    if: always()
    steps:
      - name: Check test results
        run: |
          if [[ "${{ needs.validation-tests.result }}" != "success" ]]; then
            echo "::error::Validation tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-tests.result }}" != "success" ]]; then
            echo "::warning::Security tests failed"
          fi
          # if [[ "${{ needs.terratest.result }}" != "success" ]] && [[ "${{ needs.terratest.result }}" != "skipped" ]]; then
          #   echo "::error::Terratest failed"
          #   exit 1
          # fi
          echo "::notice::All required tests passed"
